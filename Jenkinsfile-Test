pipeline {
  agent any
  environment {
    DOCKER_CREDENTIALS_ID = 'docker-hub-cred'
    REPO_URL = 'https://github.com/MyTruong28022004/spring-petclinic-microservices-fork.git'
    HELM_REPO_URL = 'https://github.com/thmthu/CD-for-pet-clinic.git'
    HELM_REPO_DIR = 'CD-for-pet-clinic'
    GIT_CREDENTIALS_ID = 'fc10ca8f-202e-4463-aa8c-ba8047f21c64'
  }

  parameters {
    string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: "${params.BRANCH_NAME}", url: "${REPO_URL}"
      }
    }

    stage('Detect Changed Services') {
      steps {
        script {
          def prevCommit = sh(script: 'git rev-parse HEAD^ || git rev-parse HEAD', returnStdout: true).trim()
          def changedFiles = sh(script: "git diff --name-only ${prevCommit} HEAD", returnStdout: true).trim().split("\n")

          def services = [
            'spring-petclinic-customers-service',
            'spring-petclinic-vets-service',
            'spring-petclinic-visits-service',
            'spring-petclinic-genai-service',
            'spring-petclinic-admin-server',
            'spring-petclinic-api-gateway',
            'spring-petclinic-config-server',
            'spring-petclinic-discovery-server'
          ]

          def changedServices = services.findAll { service ->
            changedFiles.any { it.startsWith("${service}/") }
          }

          echo "Changed services: ${changedServices}"
          env.CHANGED_SERVICES = changedServices.join(',')
        }
      }
    }

    stage('Determine Image Tag') {
      steps {
        script {
          def tag = sh(script: "git describe --tags --exact-match HEAD || echo ''", returnStdout: true).trim()
          def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
          env.IMAGE_TAG = tag ? tag : commitId
          echo "Using IMAGE_TAG=${env.IMAGE_TAG}"
          env.HAS_TAG = tag ? "true" : "false"
        }
      }
    }

    stage('Skip Build (No Services Changed)') {
      when {
        not {
          expression { return env.CHANGED_SERVICES?.trim() }
        }
      }
      steps {
        echo "No changed services detected. Skipping build and push."
      }
    }

    stage('Build & Push Changed Images') {
      when {
        expression { return env.CHANGED_SERVICES?.trim() }
      }
      steps {
        script {
          def changedServices = env.CHANGED_SERVICES.split(',').findAll { it?.trim() }

          def imageMap = [
            'spring-petclinic-customers-service': 'mytruong28022004/spring-petclinic-customers-service',
            'spring-petclinic-vets-service'    : 'mytruong28022004/spring-petclinic-vets-service',
            'spring-petclinic-visits-service'   : 'mytruong28022004/spring-petclinic-visits-service',
            'spring-petclinic-genai-service'   : 'mytruong28022004/spring-petclinic-genai-service',
            'spring-petclinic-admin-server':  'mytruong28022004/spring-petclinic-admin-server',
            'spring-petclinic-api-gateway':  'mytruong28022004/spring-petclinic-api-gateway',
            'spring-petclinic-config-server':  'mytruong28022004/spring-petclinic-config-server',
            'spring-petclinic-discovery-server':  'mytruong28022004/spring-petclinic-discovery-server'
          ]

          changedServices.each { service ->
            def imageName = imageMap[service]
            echo "Building and pushing image for: ${service} as ${imageName}:${env.IMAGE_TAG}"

            dir(service) {
              sh "../mvnw clean install -P buildDocker -DskipTests"

              withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin'
                sh "docker tag ${imageName} ${imageName}:${env.IMAGE_TAG}"
                sh "docker push ${imageName}:${env.IMAGE_TAG}"
                sh "docker push ${imageName}:latest"
              }
            }
          }
        }
      }
    }

    stage('Clone Helm Repo and Overwrite Tag') {
      when {
        expression { return env.CHANGED_SERVICES?.trim() }
      }
      steps {
        dir('cd-temp') {
          git url: "${HELM_REPO_URL}", credentialsId: "${GIT_CREDENTIALS_ID}", branch: "master"

          script {
            def valuesFile = env.HAS_TAG == 'true' ? 'spring-pet-clinic/values_staging.yaml' : 'spring-pet-clinic/values_dev.yaml'
            def changedServices = env.CHANGED_SERVICES.split(',').findAll { it?.trim() }

            changedServices.each { service ->
              def imageName = "mytruong28022004/${service}"
              sh """
                docker run --rm -v "$PWD":/workdir mikefarah/yq e "(.${service}.image.tag) = \"${IMAGE_TAG}\"" -i "/workdir/${valuesFile}"
              """
            }

            sh "git config user.email 'jenkins@example.com'"
            sh "git config user.name 'jenkins'"
            sh "git add ${valuesFile}"
            sh "git commit -m 'Update image tags to ${env.IMAGE_TAG} for services: ${env.CHANGED_SERVICES}'"
            sh "git push origin main"
          }
        }
      }
    }
  }

  post {
    always {
      echo "Cleaning up Docker images..."
      sh 'docker system prune -f || true'
    }
  }
}
